---
name: Deploy to ghcr.io

on:
  # Enable manual running of action if necessary
  workflow_dispatch:
  # Build and deploy the image on pushes to main/master branch
  push:
    # Only publish on push to main branch
    branches:
      - main
    # Don't trigger if it's just a documentation update
    paths-ignore:
      - '**.md'
      - '**.MD'
      - 'LICENSE'
      - '.gitattributes'
      - '.gitignore'
      - '.dockerignore'

jobs:

  hadolint:
    name: Run hadolint against docker files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Pull hadolint/hadolint:latest Image
        run: docker pull hadolint/hadolint:latest
      - name: Run hadolint against Dockerfiles
        run: docker run --rm -i -v "$PWD":/workdir --workdir /workdir --entrypoint hadolint hadolint/hadolint --ignore DL3003 --ignore DL3006 --ignore DL3010 --ignore DL4001 --ignore DL3007 --ignore DL3008 --ignore SC2068 --ignore DL3007 --ignore SC1091 --ignore DL3013 --ignore DL3010 $(find . -type f -iname "Dockerfile*")

  deploy_dockerhub_multiarch:
    name: Deploy (Multi-Arch)
    needs: [hadolint]
    runs-on: ubuntu-latest
    steps:

      # Check out our code
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Log into ghcr (so we can push images)
      - name: Login to ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Get metadata from repo
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Build "latest"
      - name: Build & Push - latest
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          no-cache: true
          platforms: linux/386,linux/amd64,linux/arm/v7,linux/arm/v6,linux/arm64
          push: true
          tags: ghcr.io/sdr-enthusiasts/docker-readsb-protobuf:latest
          labels: ${{ steps.meta.outputs.labels }}

      # Get version from "latest"
      - name: Get latest image version
        run: |
          docker pull "${{ env.REPO }}/${{ env.IMAGE }}:latest"
          echo "VERSION_TAG=$(docker run --rm --entrypoint cat "${{ env.REPO }}/${{ env.IMAGE }}:latest" /CONTAINER_VERSION)" >> $GITHUB_ENV

      # Show version from "latest"
      - name: Show latest image version
        run: |
          echo "${{ env.REPO }}/${{ env.IMAGE }}:latest contains version: ${{ env.VERSION_TAG }}"

      # Build version specific
      - name: Build & Push - version specific
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          no-cache: false
          platforms: linux/386,linux/amd64,linux/arm/v7,linux/arm/v6,linux/arm64
          push: true
          tags: ghcr.io/sdr-enthusiasts/docker-readsb-protobuf:${{ env.VERSION_TAG }}
          labels: ${{ steps.meta.outputs.labels }}

      # Patch dockerfile to remove healthcheck
      - name: Patch Dockerfile to remove healthcheck
        run: sed '/^HEALTHCHECK /d' < Dockerfile > Dockerfile.nohealthcheck

      # Build "latest_nohealthcheck"
      - name: Build & Push - latest nohealthcheck
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.nohealthcheck
          no-cache: false
          platforms: linux/386,linux/amd64,linux/arm/v7,linux/arm/v6,linux/arm64
          push: true
          tags: ghcr.io/sdr-enthusiasts/docker-readsb-protobuf:latest_nohealthcheck
          labels: ${{ steps.meta.outputs.labels }}

      # Build version specific _nohealthcheck
      - name: Build & Push - version specific nohealthcheck
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.nohealthcheck
          no-cache: false
          platforms: linux/386,linux/amd64,linux/arm/v7,linux/arm/v6,linux/arm64
          push: true
          tags: ghcr.io/sdr-enthusiasts/docker-readsb-protobuf:${{ env.VERSION_TAG }}_nohealthcheck
          labels: ${{ steps.meta.outputs.labels }}

  deploy_dockerhub_single_arch:
    name: Deploy
    needs: [hadolint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        docker-platform:
          - linux/amd64
          - linux/arm64
          - linux/arm/v6
          - linux/arm/v7
          - linux/i386

    steps:

      # Check out our code
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Log into ghcr (so we can push images)
      - name: Login to ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Get metadata from repo
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Get archictecture suffix
      - name: Get image architecture suffix
        run: |
          echo "ARCH_TAG=$(echo '${{ matrix.docker-platform }}' | cut -d '/' -f2- | tr -s '/' '_')" >> $GITHUB_ENV

      # Show archictecture suffix
      - name: Show image architecture suffix
        run: |
          echo "Architecture suffix: ${{ env.ARCH_TAG }}"

      # Build "latest"
      - name: Build & Push - latest
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          no-cache: true
          platforms: ${{ matrix.docker-platform }}
          push: true
          tags: ghcr.io/sdr-enthusiasts/docker-readsb-protobuf:latest_${{ env.ARCH_TAG }}
          labels: ${{ steps.meta.outputs.labels }}

      # Get version from "latest"
      - name: Get latest image version
        run: |
          docker pull "${{ env.REPO }}/${{ env.IMAGE }}:latest_${{ env.ARCH_TAG }}"
          echo "VERSION_TAG=$(docker run --rm --entrypoint cat "${{ env.REPO }}/${{ env.IMAGE }}:latest_${{ env.ARCH_TAG }}" /CONTAINER_VERSION)" >> $GITHUB_ENV

      # Show version from "latest"
      - name: Show latest image version
        run: |
          echo "${{ env.REPO }}/${{ env.IMAGE }}:latest contains version: ${{ env.VERSION_TAG }}"

      # Build version specific
      - name: Build & Push - version specific
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          no-cache: false
          platforms: ${{ matrix.docker-platform }}
          push: true
          tags: ghcr.io/sdr-enthusiasts/docker-readsb-protobuf:${{ env.VERSION_TAG }}_${{ env.ARCH_TAG }}
          labels: ${{ steps.meta.outputs.labels }}

      # Patch dockerfile to remove healthcheck
      - name: Patch Dockerfile to remove healthcheck
        run: sed '/^HEALTHCHECK /d' < Dockerfile > Dockerfile.nohealthcheck

      # Build "latest_nohealthcheck"
      - name: Build & Push - latest nohealthcheck
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.nohealthcheck
          no-cache: false
          platforms: ${{ matrix.docker-platform }}
          push: true
          tags: ghcr.io/sdr-enthusiasts/docker-readsb-protobuf:latest_nohealthcheck_${{ env.ARCH_TAG }}
          labels: ${{ steps.meta.outputs.labels }}

      # Build version specific _nohealthcheck
      - name: Build & Push - version specific nohealthcheck
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.nohealthcheck
          no-cache: false
          platforms: ${{ matrix.docker-platform }}
          push: true
          tags: ghcr.io/sdr-enthusiasts/docker-readsb-protobuf:${{ env.VERSION_TAG }}_nohealthcheck_${{ env.ARCH_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
